package cmd_test

import (
	. "github.com/smarkuck/nes/nes/cpu/instruction/cmd"
	. "github.com/smarkuck/nes/nes/cpu/testutil"
	. "github.com/smarkuck/unittest"
)

const (
	adcPosStatus     = posStatus &^ (Carry | Overflow)
	adcNotPosStatus  = (notPosStatus | Overflow) &^ Carry
	adcZeroStatus    = zeroStatus &^ (Carry | Overflow)
	adcNotZeroStatus = (notZeroStatus | Overflow) &^ Carry
	adcNegStatus     = negStatus &^ (Carry | Overflow)
	adcNotNegStatus  = (notNegStatus | Overflow) &^ Carry

	sbcPosStatus     = (posStatus | Carry) &^ Overflow
	sbcNotPosStatus  = notPosStatus | Overflow | Carry
	sbcZeroStatus    = (zeroStatus | Carry) &^ Overflow
	sbcNotZeroStatus = notZeroStatus | Overflow | Carry
	sbcNegStatus     = (negStatus | Carry) &^ Overflow
	sbcNotNegStatus  = notNegStatus | Overflow | Carry
)

func Test_AddressedCommands(t *T) {
	tests := []struct {
		name   string
		cmd    Addressed
		before env
		after  env
	}{
		{"ADC_AddWithCarry_Positive", ADC,
			env{Accumulator: 0x01, Cell: 0x01,
				Status: adcNotPosStatus},
			env{Accumulator: 0x02, Cell: 0x01,
				Status: adcPosStatus}},
		{"ADC_AddWithCarry_Zero", ADC,
			env{Accumulator: 0x00, Cell: 0x00,
				Status: adcNotZeroStatus},
			env{Accumulator: 0x00, Cell: 0x00,
				Status: adcZeroStatus}},
		{"ADC_AddWithCarry_Negative", ADC,
			env{Accumulator: 0xfe, Cell: 0x01,
				Status: adcNotNegStatus},
			env{Accumulator: 0xff, Cell: 0x01,
				Status: adcNegStatus}},
		{"ADC_AddWithCarry_ByteOverflow_SetCarry", ADC,
			env{Accumulator: 0xff, Cell: 0x01,
				Status: adcNotZeroStatus &^ Carry},
			env{Accumulator: 0x00, Cell: 0x01,
				Status: adcZeroStatus | Carry}},
		{"ADC_AddWithCarry_AddCarry_ClearCarry", ADC,
			env{Accumulator: 0xfe, Cell: 0x00,
				Status: adcNotNegStatus | Carry},
			env{Accumulator: 0xff, Cell: 0x00,
				Status: adcNegStatus &^ Carry}},
		{"ADC_AddWithCarry_AddCarry_SetCarry", ADC,
			env{Accumulator: 0xfe, Cell: 0x01,
				Status: adcNotZeroStatus | Carry},
			env{Accumulator: 0x00, Cell: 0x01,
				Status: adcZeroStatus | Carry}},
		{"ADC_AddWithCarry_NoPositiveOverflow", ADC,
			env{Accumulator: 0x7e, Cell: 0x01,
				Status: adcNotPosStatus | Overflow},
			env{Accumulator: 0x7f, Cell: 0x01,
				Status: adcPosStatus &^ Overflow}},
		{"ADC_AddWithCarry_PositiveOverflowOnSignChange", ADC,
			env{Accumulator: 0x7f, Cell: 0x01,
				Status: adcNotNegStatus &^ Overflow},
			env{Accumulator: 0x80, Cell: 0x01,
				Status: adcNegStatus | Overflow}},
		{"ADC_AddWithCarry_NoNegativeOverflow", ADC,
			env{Accumulator: 0x81, Cell: 0xff,
				Status: (notNegStatus | Overflow) &^ Carry},
			env{Accumulator: 0x80, Cell: 0xff,
				Status: (negStatus | Carry) &^ Overflow}},
		{"ADC_AddWithCarry_NegativeOverflowOnSignChange", ADC,
			env{Accumulator: 0x80, Cell: 0xff,
				Status: notPosStatus &^ (Carry | Overflow)},
			env{Accumulator: 0x7f, Cell: 0xff,
				Status: posStatus | Overflow | Carry}},

		{"CMP_CompareWithAcc_AccLtCell_NegativeNoCarry", CMP,
			env{Accumulator: 0x01, Cell: 0x81,
				Status: notNegStatus | Carry},
			env{Accumulator: 0x01, Cell: 0x81,
				Status: negStatus &^ Carry}},
		{"CMP_CompareWithAcc_AccMinusCell_NegOverflow", CMP,
			env{Accumulator: 0x01, Cell: 0x82,
				Status: notPosStatus | Carry},
			env{Accumulator: 0x01, Cell: 0x82,
				Status: posStatus &^ Carry}},
		{"CMP_CompareWithAcc_AccEqCell_ZeroCarry", CMP,
			env{Accumulator: 0x01, Cell: 0x01,
				Status: notZeroStatus &^ Carry},
			env{Accumulator: 0x01, Cell: 0x01,
				Status: zeroStatus | Carry}},
		{"CMP_CompareWithAcc_AccGtCell_PositiveCarry", CMP,
			env{Accumulator: 0x80, Cell: 0x01,
				Status: notPosStatus &^ Carry},
			env{Accumulator: 0x80, Cell: 0x01,
				Status: posStatus | Carry}},
		{"CMP_CompareWithAcc_AccMinusCell_PosOverflow", CMP,
			env{Accumulator: 0x81, Cell: 0x01,
				Status: notNegStatus &^ Carry},
			env{Accumulator: 0x81, Cell: 0x01,
				Status: negStatus | Carry}},

		{"CPX_CompareWithRegX_XLtCell_NegativeNoCarry", CPX,
			env{RegisterX: 0x01, Cell: 0x81,
				Status: notNegStatus | Carry},
			env{RegisterX: 0x01, Cell: 0x81,
				Status: negStatus &^ Carry}},
		{"CPX_CompareWithRegX_XMinusCell_NegOverflow", CPX,
			env{RegisterX: 0x01, Cell: 0x82,
				Status: notPosStatus | Carry},
			env{RegisterX: 0x01, Cell: 0x82,
				Status: posStatus &^ Carry}},
		{"CPX_CompareWithRegX_XEqCell_ZeroCarry", CPX,
			env{RegisterX: 0x01, Cell: 0x01,
				Status: notZeroStatus &^ Carry},
			env{RegisterX: 0x01, Cell: 0x01,
				Status: zeroStatus | Carry}},
		{"CPX_CompareWithRegX_XGtCell_PositiveCarry", CPX,
			env{RegisterX: 0x80, Cell: 0x01,
				Status: notPosStatus &^ Carry},
			env{RegisterX: 0x80, Cell: 0x01,
				Status: posStatus | Carry}},
		{"CPX_CompareWithRegX_XMinusCell_PosOverflow", CPX,
			env{RegisterX: 0x81, Cell: 0x01,
				Status: notNegStatus &^ Carry},
			env{RegisterX: 0x81, Cell: 0x01,
				Status: negStatus | Carry}},

		{"CPY_CompareWithRegY_YLtCell_NegativeNoCarry", CPY,
			env{RegisterY: 0x01, Cell: 0x81,
				Status: notNegStatus | Carry},
			env{RegisterY: 0x01, Cell: 0x81,
				Status: negStatus &^ Carry}},
		{"CPY_CompareWithRegY_YMinusCell_NegOverflow", CPY,
			env{RegisterY: 0x01, Cell: 0x82,
				Status: notPosStatus | Carry},
			env{RegisterY: 0x01, Cell: 0x82,
				Status: posStatus &^ Carry}},
		{"CPY_CompareWithRegY_YEqCell_ZeroCarry", CPY,
			env{RegisterY: 0x01, Cell: 0x01,
				Status: notZeroStatus &^ Carry},
			env{RegisterY: 0x01, Cell: 0x01,
				Status: zeroStatus | Carry}},
		{"CPY_CompareWithRegY_YGtCell_PositiveCarry", CPY,
			env{RegisterY: 0x80, Cell: 0x01,
				Status: notPosStatus &^ Carry},
			env{RegisterY: 0x80, Cell: 0x01,
				Status: posStatus | Carry}},
		{"CPY_CompareWithRegY_YMinusCell_PosOverflow", CPY,
			env{RegisterY: 0x81, Cell: 0x01,
				Status: notNegStatus &^ Carry},
			env{RegisterY: 0x81, Cell: 0x01,
				Status: negStatus | Carry}},

		{"DEC_DecrementMemory_Positive", DEC,
			env{Cell: 0x02, Status: notPosStatus},
			env{Cell: 0x01, Status: posStatus}},
		{"DEC_DecrementMemory_Zero", DEC,
			env{Cell: 0x01, Status: notZeroStatus},
			env{Cell: 0x00, Status: zeroStatus}},
		{"DEC_DecrementMemory_Negative", DEC,
			env{Cell: 0x00, Status: notNegStatus},
			env{Cell: 0xff, Status: negStatus}},

		{"INC_IncrementMemory_Positive", INC,
			env{Cell: 0x00, Status: notPosStatus},
			env{Cell: 0x01, Status: posStatus}},
		{"INC_IncrementMemory_Zero", INC,
			env{Cell: 0xff, Status: notZeroStatus},
			env{Cell: 0x00, Status: zeroStatus}},
		{"INC_IncrementMemory_Negative", INC,
			env{Cell: 0xfe, Status: notNegStatus},
			env{Cell: 0xff, Status: negStatus}},

		{"JMP_JumpToAddress", JMP,
			env{ProgramCounter: prgAddr},
			env{ProgramCounter: cellAddr}},

		{"JSR_JumpToSubroutine", JSR,
			env{ProgramCounter: prgAddr,
				StackPtr: InitStackPtr},
			env{ProgramCounter: cellAddr,
				StackPtr: InitStackPtr - 2,
				Stack: Stack{
					prgAddrHigh,
					prgAddrLow - subroutineOffset}}},

		{"LDA_LoadAccumulator_Positive", LDA,
			env{Cell: 0x01, Accumulator: 0,
				Status: notPosStatus},
			env{Cell: 0x01, Accumulator: 0x01,
				Status: posStatus}},
		{"LDA_LoadAccumulator_Zero", LDA,
			env{Cell: 0x00, Accumulator: 0x01,
				Status: notZeroStatus},
			env{Cell: 0x00, Accumulator: 0x00,
				Status: zeroStatus}},
		{"LDA_LoadAccumulator_Negative", LDA,
			env{Cell: 0xff, Accumulator: 0x00,
				Status: notNegStatus},
			env{Cell: 0xff, Accumulator: 0xff,
				Status: negStatus}},

		{"LDX_LoadRegisterX_Positive", LDX,
			env{Cell: 0x01, RegisterX: 0,
				Status: notPosStatus},
			env{Cell: 0x01, RegisterX: 0x01,
				Status: posStatus}},
		{"LDX_LoadRegisterX_Zero", LDX,
			env{Cell: 0x00, RegisterX: 0x01,
				Status: notZeroStatus},
			env{Cell: 0x00, RegisterX: 0x00,
				Status: zeroStatus}},
		{"LDX_LoadRegisterX_Negative", LDX,
			env{Cell: 0xff, RegisterX: 0x00,
				Status: notNegStatus},
			env{Cell: 0xff, RegisterX: 0xff,
				Status: negStatus}},

		{"LDY_LoadRegisterY_Positive", LDY,
			env{Cell: 0x01, RegisterY: 0,
				Status: notPosStatus},
			env{Cell: 0x01, RegisterY: 0x01,
				Status: posStatus}},
		{"LDY_LoadRegisterY_Zero", LDY,
			env{Cell: 0x00, RegisterY: 0x01,
				Status: notZeroStatus},
			env{Cell: 0x00, RegisterY: 0x00,
				Status: zeroStatus}},
		{"LDY_LoadRegisterY_Negative", LDY,
			env{Cell: 0xff, RegisterY: 0x00,
				Status: notNegStatus},
			env{Cell: 0xff, RegisterY: 0xff,
				Status: negStatus}},

		{"SBC_SubtractWithCarry_Positive", SBC,
			env{Accumulator: 0x02, Cell: 0x01,
				Status: sbcNotPosStatus},
			env{Accumulator: 0x01, Cell: 0x01,
				Status: sbcPosStatus}},
		{"SBC_SubtractWithCarry_Zero", SBC,
			env{Accumulator: 0x01, Cell: 0x01,
				Status: sbcNotZeroStatus},
			env{Accumulator: 0x00, Cell: 0x01,
				Status: sbcZeroStatus}},
		{"SBC_SubtractWithCarry_Negative", SBC,
			env{Accumulator: 0xff, Cell: 0x01,
				Status: sbcNotNegStatus},
			env{Accumulator: 0xfe, Cell: 0x01,
				Status: sbcNegStatus}},
		{"SBC_SubtractWithCarry_NoByteOverflow_ClrCarry", SBC,
			env{Accumulator: 0x00, Cell: 0x01,
				Status: sbcNotNegStatus | Carry},
			env{Accumulator: 0xff, Cell: 0x01,
				Status: sbcNegStatus &^ Carry}},
		{"SBC_SubtractWithCarry_DontAddCarry_SetCarry", SBC,
			env{Accumulator: 0x01, Cell: 0x00,
				Status: sbcNotZeroStatus &^ Carry},
			env{Accumulator: 0x00, Cell: 0x00,
				Status: sbcZeroStatus | Carry}},
		{"SBC_SubtractWithCarry_DontAddCarry_ClearCarry", SBC,
			env{Accumulator: 0x01, Cell: 0x01,
				Status: sbcNotNegStatus &^ Carry},
			env{Accumulator: 0xff, Cell: 0x01,
				Status: sbcNegStatus &^ Carry}},
		{"SBC_SubtractWithCarry_NoPositiveOverflow", SBC,
			env{Accumulator: 0x7e, Cell: 0xff,
				Status: notPosStatus | Overflow | Carry},
			env{Accumulator: 0x7f, Cell: 0xff,
				Status: posStatus &^ (Overflow | Carry)}},
		{"SBC_SubtractWithCarry_PosOverflowOnSignChange", SBC,
			env{Accumulator: 0x7f, Cell: 0xff,
				Status: (notNegStatus | Carry) &^ Overflow},
			env{Accumulator: 0x80, Cell: 0xff,
				Status: (negStatus | Overflow) &^ Carry}},
		{"SBC_SubtractWithCarry_NoNegativeOverflow", SBC,
			env{Accumulator: 0x81, Cell: 0x01,
				Status: sbcNotNegStatus | Overflow},
			env{Accumulator: 0x80, Cell: 0x01,
				Status: sbcNegStatus &^ Overflow}},
		{"SBC_SubtractWithCarry_NegOverflowOnSignChange", SBC,
			env{Accumulator: 0x80, Cell: 0x01,
				Status: sbcNotPosStatus &^ Overflow},
			env{Accumulator: 0x7f, Cell: 0x01,
				Status: sbcPosStatus | Overflow}},

		{"STA_StoreAccumulator", STA,
			env{Accumulator: value},
			env{Accumulator: value, Cell: value}},
		{"STX_StoreAccumulator", STX,
			env{RegisterX: value},
			env{RegisterX: value, Cell: value}},
		{"STY_StoreAccumulator", STY,
			env{RegisterY: value},
			env{RegisterY: value, Cell: value}},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *T) {
			before := test.before.toState()
			test.cmd(before, cellAddr)
			expectStateEq(t, before, test.after.toState())
		})
	}
}

func Test_BinaryAddressedCommands(t *T) {
	tests := []struct {
		name   string
		cmd    Addressed
		before env
		after  env
	}{
		{"AND_AndWithAccumulator_Positive", AND,
			env{Accumulator: 0b01101001, Cell: 0b01011010,
				Status: notPosStatus},
			env{Accumulator: 0b01001000, Cell: 0b01011010,
				Status: posStatus}},
		{"AND_AndWithAccumulator_Zero", AND,
			env{Accumulator: 0b00100100, Cell: 0b11000010,
				Status: notZeroStatus},
			env{Accumulator: 0b00000000, Cell: 0b11000010,
				Status: zeroStatus}},
		{"AND_AndWithAccumulator_Negative", AND,
			env{Accumulator: 0b11101001, Cell: 0b10011010,
				Status: notNegStatus},
			env{Accumulator: 0b10001000, Cell: 0b10011010,
				Status: negStatus}},

		{"ASL_ArithmeticShiftLeft_SetPositiveCarry", ASL,
			env{Cell: 0b10100010,
				Status: notPosStatus &^ Carry},
			env{Cell: 0b01000100,
				Status: posStatus | Carry}},
		{"ASL_ArithmeticShiftLeft_SetZeroCarry", ASL,
			env{Cell: 0b10000000,
				Status: notZeroStatus &^ Carry},
			env{Cell: 0b00000000,
				Status: zeroStatus | Carry}},
		{"ASL_ArithmeticShiftLeft_SetNegativeNoCarry", ASL,
			env{Cell: 0b01000010,
				Status: notNegStatus | Carry},
			env{Cell: 0b10000100,
				Status: negStatus &^ Carry}},

		{"BIT_BitTest_Bit6ClearOverflow_Bit7SetNegative", BIT,
			env{Cell: 0b10000000,
				Status: (zeroStatus | Overflow) &^ Negative},
			env{Cell: 0b10000000,
				Status: (zeroStatus | Negative) &^ Overflow}},
		{"BIT_BitTest_Bit6SetOverflow_Bit7ClearNegative", BIT,
			env{Cell: 0b01000000,
				Status: (zeroStatus | Negative) &^ Overflow},
			env{Cell: 0b01000000,
				Status: (zeroStatus | Overflow) &^ Negative}},
		{"BIT_BitTest_BitwiseAndOnAccumulatorSetsZero", BIT,
			env{Accumulator: 0b11000100, Cell: 0b00111011,
				Status: notZeroStatus | Overflow | Negative},
			env{Accumulator: 0b11000100, Cell: 0b00111011,
				Status: zeroStatus &^ (Overflow | Negative)}},
		{"BIT_BitTest_BitwiseAndOnAccumulatorClearsZero", BIT,
			env{Accumulator: 0b10000100, Cell: 0b11000100,
				Status: zeroStatus &^ (Overflow | Negative)},
			env{Accumulator: 0b10000100, Cell: 0b11000100,
				Status: notZeroStatus | Overflow | Negative}},

		{"EOR_ExclusiveOrWithAccumulator_Positive", EOR,
			env{Accumulator: 0b01101001, Cell: 0b00011010,
				Status: notPosStatus},
			env{Accumulator: 0b01110011, Cell: 0b00011010,
				Status: posStatus}},
		{"EOR_ExclusiveOrWithAccumulator_Zero", EOR,
			env{Accumulator: 0b10001000, Cell: 0b10001000,
				Status: notZeroStatus},
			env{Accumulator: 0b00000000, Cell: 0b10001000,
				Status: zeroStatus}},
		{"EOR_ExclusiveOrWithAccumulator_Negative", EOR,
			env{Accumulator: 0b01101001, Cell: 0b10011010,
				Status: notNegStatus},
			env{Accumulator: 0b11110011, Cell: 0b10011010,
				Status: negStatus}},

		{"LSR_LogicalShiftRight_SetPositiveNoCarry", LSR,
			env{Cell: 0b10001010,
				Status: notPosStatus | Carry},
			env{Cell: 0b01000101,
				Status: posStatus &^ Carry}},
		{"LSR_LogicalShiftRight_SetZeroCarry", LSR,
			env{Cell: 0b00000001,
				Status: notZeroStatus &^ Carry},
			env{Cell: 0b00000000,
				Status: zeroStatus | Carry}},

		{"ORA_OrWithAccumulator_Positive", ORA,
			env{Accumulator: 0b01101001, Cell: 0b00011010,
				Status: notPosStatus},
			env{Accumulator: 0b01111011, Cell: 0b00011010,
				Status: posStatus}},
		{"ORA_OrWithAccumulator_Zero", ORA,
			env{Accumulator: 0b00000000, Cell: 0b00000000,
				Status: notZeroStatus},
			env{Accumulator: 0b00000000, Cell: 0b00000000,
				Status: zeroStatus}},
		{"ORA_OrWithAccumulator_Negative", ORA,
			env{Accumulator: 0b01101001, Cell: 0b10011010,
				Status: notNegStatus},
			env{Accumulator: 0b11111011, Cell: 0b10011010,
				Status: negStatus}},

		{"ROL_RotateLeft_AddCarry_SetPositiveCarry", ROL,
			env{Cell: 0b10100010,
				Status: notPosStatus | Carry},
			env{Cell: 0b01000101,
				Status: posStatus | Carry}},
		{"ROL_RotateLeft_SetZeroCarry", ROL,
			env{Cell: 0b10000000,
				Status: notZeroStatus &^ Carry},
			env{Cell: 0b00000000,
				Status: zeroStatus | Carry}},
		{"ROL_RotateLeft_AddCarry_SetNegativeNoCarry", ROL,
			env{Cell: 0b01000010,
				Status: notNegStatus | Carry},
			env{Cell: 0b10000101,
				Status: negStatus &^ Carry}},

		{"ROR_RotateRight_SetPositiveNoCarry", ROR,
			env{Cell: 0b10100010,
				Status: notPosStatus &^ Carry},
			env{Cell: 0b01010001,
				Status: posStatus &^ Carry}},
		{"ROR_RotateRight_SetZeroCarry", ROR,
			env{Cell: 0b00000001,
				Status: notZeroStatus &^ Carry},
			env{Cell: 0b00000000,
				Status: zeroStatus | Carry}},
		{"ROR_RotateRight_AddCarry_SetNegativeNoCarry", ROR,
			env{Cell: 0b01000010,
				Status: notNegStatus | Carry},
			env{Cell: 0b10100001,
				Status: negStatus &^ Carry}},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *T) {
			before := test.before.toState()
			test.cmd(before, cellAddr)
			expectBinStateEq(t, before, test.after.toState())
		})
	}
}
